import io
import logging
import os
import json
import time
import boto3
import botocore
from markov.utils import get_boto_config, get_s3_kms_extra_args, test_internet_connection
from markov.log_handler.logger import Logger
from markov.log_handler.exception_handler import log_and_exit
from markov.log_handler.constants import (SIMAPP_EVENT_ERROR_CODE_500, SIMAPP_EVENT_ERROR_CODE_400,
                                          SIMAPP_S3_DATA_STORE_EXCEPTION)

LOG = Logger(__name__, logging.INFO).get_logger()

class SageS3Client():
    def __init__(self, bucket=None, s3_prefix=None, aws_region=None, s3_endpoint_url=None):
        self.aws_region = aws_region
        self.bucket = bucket
        self.s3_prefix = s3_prefix
        self.s3_endpoint_url = s3_endpoint_url
        self.model_checkpoints_prefix = os.path.normpath(s3_prefix + "/model/") + "/"
        self.s3_extra_args = get_s3_kms_extra_args()
        LOG.info("Initializing SageS3Client...")

    def get_client(self):
        session = boto3.session.Session()
        return session.client('s3', region_name=self.aws_region, endpoint_url=self.s3_endpoint_url, config=get_boto_config())

    def _get_s3_key(self, key):
        return os.path.normpath(self.model_checkpoints_prefix + "/" + key)

    def download_file(self, s3_key, local_path):
        s3_client = self.get_client()
        try:
            s3_client.download_file(self.bucket, s3_key, local_path)
            return True
        except botocore.exceptions.ClientError as err:
            # It is possible that the file isn't there in which case we should
            # return fasle and let the client decide the next action
            if err.response['Error']['Code'] == "404":
                return False
            else:
                log_and_exit("Unable to download file (s3bucket: {} s3_key: {})".format(self.bucket,
                                                                                        s3_key),
                             SIMAPP_S3_DATA_STORE_EXCEPTION,
                             SIMAPP_EVENT_ERROR_CODE_400)
        except botocore.exceptions.ConnectTimeoutError as ex:
            log_and_exit("Issue with your current VPC stack and IAM roles.\
                          You might need to reset your account resources: {}".format(ex),
                         SIMAPP_S3_DATA_STORE_EXCEPTION,
                         SIMAPP_EVENT_ERROR_CODE_400)
        except Exception as ex:
            log_and_exit("Exception in downloading file (s3bucket: {} s3_key: {}): {}".format(self.bucket,
                                                                                              s3_key,
                                                                                              ex),
                         SIMAPP_S3_DATA_STORE_EXCEPTION,
                         SIMAPP_EVENT_ERROR_CODE_500)

    def upload_file(self, s3_key, local_path):
        s3_client = self.get_client()
        try:
            s3_client.upload_file(Filename=local_path, Bucket=self.bucket, Key=s3_key,
                                  ExtraArgs=self.s3_extra_args)
            return True
        except botocore.exceptions.ClientError:
            log_and_exit("Unable to upload file",
                         SIMAPP_S3_DATA_STORE_EXCEPTION,
                         SIMAPP_EVENT_ERROR_CODE_400)
        except Exception as ex:
            log_and_exit("Exception in uploading file: {}".format(ex),
                         SIMAPP_S3_DATA_STORE_EXCEPTION,
                         SIMAPP_EVENT_ERROR_CODE_500)
